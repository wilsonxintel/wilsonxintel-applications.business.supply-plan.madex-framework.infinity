<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<OfficeApp xmlns="http://schemas.microsoft.com/office/appforoffice/1.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:bt="http://schemas.microsoft.com/office/officeappbasictypes/1.0" xmlns:ov="http://schemas.microsoft.com/office/taskpaneappversionoverrides" xsi:type="TaskPaneApp">

  <!-- Every Add-in has a unique ID that speicifes it. The ID element specifies the unique ID of your Office Add-in as a GUID. -->
  <Id>a963b4a9-15fa-4d1e-8bad-8c03c6027ad7</Id>

  <!-- Your add-in can have multiple versions, the Version element let's office know what version this add-in is. -->
  <Version>1.0.0.0</Version>

  <!-- 
    Specifies the name of the individual or company that developed this Office Add-in as a string of 
    no more than 125 characters. In this case, Sigma Coding (ME) is the provider
  -->
  <ProviderName>Infinity</ProviderName>

  <!-- 
      Specifies the default culture name of the locale used by strings in your add-in. 
      In this case, I want it to be English. If I want my add-in to be "multi-language", I could
      change this to adapt to the User's Local Languae.
  -->
  <DefaultLocale>en-US</DefaultLocale>

  <!-- The Display name is what you see when the add-in loads. I want mine to say "Sigma Coding" -->
  <DisplayName DefaultValue="Infinity" />

  <!-- My Add-in can have a description or a summary of what it does. We use the Description tag to "describe" our add-in. -->
  <Description DefaultValue="The Sigma Coding Excel Add In is used to access functionality developed by Sigma Coding." />

  <!-- You have a brand, so advertise it! Here we can define an Icon that represents our brand or really anything when our add-in loads. -->
  <IconUrl DefaultValue="https://localhost:3000/assets/sigma-icon-32.png" />

  <!-- Icons can come in different resolutions, for high resolution icons you specify a different Icon. -->
  <HighResolutionIconUrl DefaultValue="https://localhost:3000/assets/sigma-icon-80.png" />

  <!-- If you have a support URL, you can provide it in the add-in, right now all I'm doing is pointing people to my Github repo. -->
  <SupportUrl DefaultValue="https://github.com/areed1192/sigma_coding_youtube" />

  <!-- 
    Lists any domains in addition to the domain specified in the SourceLocation 
    element that your Office Add-in will use to load pages. It also lists trusted 
    domains from which Office.js API calls can be made from IFrames within the 
    add-in. For each additional domain, specify an AppDomain element.
  -->
  <AppDomains>
    <AppDomain>https://contoso.com</AppDomain>
  </AppDomains>

  <!-- 
    Specifies the Office client application where the Office Add-in will activate. 
    Contains a collection of Host elements and their settings. When included in the VersionOverrides node, 
    this element overrides the Hosts element in the parent portion of the manifest.
  -->
  <Hosts>
    <!-- 
      Specifies an individual Office application type where the add-in should activate. Use the name attribute to
      determine the host type. The value must be one of the following:

      - Document (Word)
      - Database (Access)
      - Mailbox (Outlook)
      - Notebook (OneNote)
      - Presentation (PowerPoint)
      - Project (Project)
      - Workbook (Excel)
    
      My Project is an Excel Add-In so I want my host to be a "Workbook".
    -->
    <Host Name="Workbook" />
  </Hosts>

  <Requirements>
    <Sets DefaultMinVersion="1.1">
      <Set Name="CustomFunctionsRuntime" MinVersion="1.1" />
    </Sets>
  </Requirements>

  <!-- 
    Specifies the source file location(s) for your Office Add-in as a URL between 1 and 2018 characters long. 
    The source location must be an HTTPS address, not a file path.

    I define the "structure" of my add-in using an HTML file. The HTML file I created is called "taskpane.html", so 
    I want Office to read that file so that it knows how the layout of my add-in will look.
  -->
  <DefaultSettings>
    <SourceLocation DefaultValue="https://localhost:3000/taskpane.html" />
  </DefaultSettings>

 
  <Permissions>ReadWriteDocument</Permissions>
  <VersionOverrides xmlns="http://schemas.microsoft.com/office/taskpaneappversionoverrides" xsi:type="VersionOverridesV1_0">
    <Hosts>
      <Host xsi:type="Workbook">
        <Runtimes>
          <Runtime resid="Taskpane.Url" lifetime="long" />
        </Runtimes>
        <AllFormFactors>
          <ExtensionPoint xsi:type="CustomFunctions">
            <Script>
              <SourceLocation resid="Functions.Script.Url" />
            </Script>
            <Page>
              <SourceLocation resid="Functions.Page.Url" />
            </Page>
            <Metadata>
              <SourceLocation resid="Functions.Metadata.Url" />
            </Metadata>
            <Namespace resid="Functions.Namespace" />
          </ExtensionPoint>
        </AllFormFactors>

        <DesktopFormFactor>

          <GetStarted>
            <Title resid="GetStarted.Title" />
            <Description resid="GetStarted.Description" />
            <LearnMoreUrl resid="GetStarted.LearnMoreUrl" />
          </GetStarted>

          <FunctionFile resid="Commands.Url" />

          <ExtensionPoint xsi:type="PrimaryCommandSurface">

            <!-- Let's Create a Custom Tab inside the Excel Ribbon. -->
            <CustomTab id="Infinity.Tab">

              <!-- That custom tab will have one Group. -->
              <Group id="Infinity.Tab1.Group1">

                <!-- That Group will have a label that is identified by the ID "SiNPICSTgma.Tab1.GroupLabel". resid must point to a ShortString resource -->
                <Label resid="Infinity.Tab1.GroupLabel" />

                <Icon>
                  <!-- Each size needs its own icon resource or it will look distorted when resized -->
                  <!-- Icons. Required sizes 16,31,80, optional 20, 24, 40, 48, 64. Strongly recommended to provide all sizes for great UX -->
                  <!-- Use PNG icons and remember that all URLs on the resources section must use HTTPS -->
                  <bt:Image size="16" resid="Icon.16x16" />
                  <bt:Image size="32" resid="Icon.32x32" />
                  <bt:Image size="80" resid="Icon.80x80" />
                </Icon>

                <!-- Let's add a Control to our Tab that belongs to "Group 1" -->
                <Control xsi:type="Button" id="Infinity.TaskpaneButton">

                  <!-- Let's also make sure our button has a label. -->
                  <Label resid="Infinity.TaskpaneButton.Label" />

                  <!-- A button can have something called a Supertip, basically it's what we see when we hover over the button. -->
                  <Supertip>

                    <!-- A Supertip can have a label. -->
                    <Title resid="Infinity.TaskpaneButton.Label" />

                    <!-- And a description about what my button does -->
                    <Description resid="Infinity.TaskpaneButton.Tooltip" />

                  </Supertip>

                  <!-- My Button should have an Icon -->
                  <Icon>
                    <bt:Image size="16" resid="Icon.16x16" />
                    <bt:Image size="32" resid="Icon.32x32" />
                    <bt:Image size="80" resid="Icon.80x80" />
                  </Icon>

                  <!-- 
                    ACTION:

                    I Also want my button to have an Action, something that happens when I click it.
                    Supported actions are ExecuteFuncion (Run a function I define in my add-in) or ShowTaskpane (Show the new taskpane I've made)
                    Look at the FunctionFile.html page for reference on how to implement the function 

                    Let's have it show the taskpane 
                  -->
                  <Action xsi:type="ShowTaskpane">

                    <!-- My taskpane needs and ID. -->
                    <TaskpaneId>ButtonId1</TaskpaneId>

                    <!-- 
                         Microsoft's Notes:
                         Provide a url resource id for the location that will be displayed on the task pane 

                         Alex's Notes:
                         This is CRUCIAL where is "What I want to show" located? Right now I'm just creating an ID 
                         that I'll define down below to point to a single file. IF YOU DO NOT SPECIFY THIS CORRECTLY
                         THE ADD-IN WILL NOT LOAD CORRECTLY!
                     -->
                    <SourceLocation resid="Taskpane.Url" />

                  </Action>
                </Control>
              </Group>

              <!-- Finally, I want my tab to have a label. -->
              <Label resid="Infinity.Tab.TabLabel" />

            </CustomTab>

            <!-- <OfficeTab id="TabHome">

              <Group id="CommandsGroup">
                <Label resid="CommandsGroup.Label"/>
                <Icon>
                  <bt:Image size="16" resid="Icon.16x16"/>
                  <bt:Image size="32" resid="Icon.32x32"/>
                  <bt:Image size="80" resid="Icon.80x80"/>
                </Icon>
                <Control xsi:type="Button" id="TaskpaneButton">
                  <Label resid="TaskpaneButton.Label"/>
                  <Supertip>
                    <Title resid="TaskpaneButton.Label"/>
                    <Description resid="TaskpaneButton.Tooltip"/>
                  </Supertip>
                  <Icon>
                    <bt:Image size="16" resid="Icon.16x16"/>
                    <bt:Image size="32" resid="Icon.32x32"/>
                    <bt:Image size="80" resid="Icon.80x80"/>
                  </Icon>
                  <Action xsi:type="ShowTaskpane">
                    <TaskpaneId>ButtonId1</TaskpaneId>
                    <SourceLocation resid="Taskpane.Url"/>
                  </Action>
                </Control>
              </Group>
            </OfficeTab> -->

          </ExtensionPoint>
        </DesktopFormFactor>
      </Host>
    </Hosts>

    <Resources>

      <!-- This add-in uses some images, so we need to define where those images are. Also it's probably best to give them an ID so we can easily identify them. -->
      <bt:Images>
        <bt:Image id="Icon.16x16" DefaultValue="https://officedev.github.io/Office-Add-in-samples/Samples/office-contextual-tabs/assets/icon-16.png"/>
        <bt:Image id="Icon.32x32" DefaultValue="https://officedev.github.io/Office-Add-in-samples/Samples/office-contextual-tabs/assets/icon-32.png"/>
        <bt:Image id="Icon.80x80" DefaultValue="https://officedev.github.io/Office-Add-in-samples/Samples/office-contextual-tabs/assets/icon-80.png"/>
      </bt:Images>

      <!-- Some logic here, but now we are talking about URLs. The URLs point to the actual files that contain our code. -->
      <bt:Urls>
        <bt:Url id="Functions.Script.Url" DefaultValue="https://localhost:3000/dist/functions.js" />
        <bt:Url id="Functions.Metadata.Url" DefaultValue="https://localhost:3000/dist/functions.json" />
        <bt:Url id="Functions.Page.Url" DefaultValue="https://localhost:3000/dist/functions.html" />

        <bt:Url id="GetStarted.LearnMoreUrl" DefaultValue="https://go.microsoft.com/fwlink/?LinkId=276812" />
        <bt:Url id="Commands.Url" DefaultValue="https://localhost:3000/commands.html" />
        <bt:Url id="Taskpane.Url" DefaultValue="https://localhost:3000/taskpane.html" />
        <bt:Url id="Infinity.Taskpane.Url" DefaultValue="https://localhost:3000/taskpane.html" />
      </bt:Urls>

      <!-- 
        This section contains our `ShortStrings` these are small pieces of text that will be used in the Add-In and can represent button labels or even titles.
        Short Strings range from 1 character to 125 characters.
      -->
      <bt:ShortStrings>
        <bt:String id="Functions.Namespace" DefaultValue="Infinity" />
        <bt:String id="GetStarted.Title" DefaultValue="Get started with your sample add-in!" />
        <bt:String id="CommandsGroup.Label" DefaultValue="Commands Group" />
        <bt:String id="TaskpaneButton.Label" DefaultValue="Open select Form" />

        <bt:String id="Infinity.Tab.TabLabel" DefaultValue="Infinity" />
        <bt:String id="Infinity.Tab1.GroupLabel" DefaultValue="Commands Group Infinity" />
        <bt:String id="Infinity.TaskpaneButton.Label" DefaultValue="Open selection Form" />


      </bt:ShortStrings>

      <bt:LongStrings>
        <bt:String id="GetStarted.Description" DefaultValue="Your sample add-in loaded succesfully. Go to the HOME tab and click the 'Show Taskpane' button to get started." />
        <bt:String id="TaskpaneButton.Tooltip" DefaultValue="Click to Show a Taskpane" />
        <bt:String id="Infinity.TaskpaneButton.Tooltip" DefaultValue="Click to Show a Taskpane" />
      </bt:LongStrings>

    </Resources>
  </VersionOverrides>
</OfficeApp>